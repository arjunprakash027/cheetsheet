# -*- coding: utf-8 -*-
"""ids_lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sfZ-OKNg7AY8k8JrlVx8oWNhBb4PtAcA
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

np.random.seed(0)
x = np.random.rand(100,1)
y = 5*x**3 + 6*x**2 + 8*x + 2

lr = LinearRegression()

lr.fit(x,y)

y_predict = lr.predict(x)

print('slope is',lr.coef_)
print('interscept is',lr.intercept_)

plt.scatter(x,y,s=10)

plt.xlabel('x')
plt.ylabel('y')

plt.scatter(x,y_predict,s=5,color='r')

plt.show()

import matplotlib.pyplot as plt

subjects = ['English','Maths','History','Science','Biology']

marks = [int(input()) for x in range(5)]

plt.bar(subjects,marks)

plt.xlabel('subjects')
plt.ylabel('marks')

plt.title('subject  marks graph')

plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.random.rand(100,1)

y1= 7*x +12
y2= 2*x - x**5

plt.scatter(x,y1,label=f'postive correlation = {np.round(np.corrcoef(x,y1)[0,1],2)}')

 
plt.scatter(x,y2,label = f'negative corr = {np.round(np.corrcoef(x,y2)[0,1],2)}')

plt.title("correlation scatterplot")

plt.legend()

plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Churn_Modelling.csv')

df

#male vs female
gender = df['Gender'].value_counts() 

sns.barplot(x=gender.index,y=gender.values)
plt.show()

#creditcard vs country

sns.violinplot(x="Geography",y="CreditScore",hue="HasCrCard",split=True,data=df)
plt.show()

import pandas as pd
import numpy as np

frame2 = {
    'A':np.array([20,30,4,5,78,54,66,78]),
    'B':np.array([45,66,89,33,2,33,6567,3]),
    'C':np.array([np.nan,67657,88,54,23,556,5,2]),
    'D':np.array([45,55,33,22,11,445,56,np.nan]),
    'E':np.array([456,67,875,356,345,23,23,54]),
    'F':np.array([np.nan,np.nan,np.nan,44,44,56,34,22]),
}

df = pd.DataFrame(frame2)

print(df)

print(df.index)

print(df.head(3))

print(df.tail(3))

print(df.sort_values(by="B"))

print("................")

print(df['A'])

print(df[0:3])

print(df.loc[0:4,["A","C"]])

df = df.fillna(value=78)

print(df)

print(df.mean)

print(df.cumsum())

print(df.apply(lambda x : x.max()-x.min()))

df.index

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from mpl_toolkits.mplot3d import Axes3D

df = pd.read_csv('/content/Mall_Customers.csv')
df.drop(["CustomerID"],axis=1,inplace=True)
wcss = []

for k in range(1,11):
  kmeans = KMeans(n_clusters=k,init = "k-means++")
  kmeans.fit(df.iloc[:,1:])
  wcss.append(kmeans.inertia_)
print(wcss)

plt.plot(range(1,11),wcss,marker="8")
plt.xticks(np.arange(1,11,1))

plt.show()

#seems like the best cluster range is 10 but we pick 6

km = KMeans(n_clusters=6)
km.fit(df.iloc[:,1:])
clusters = km.predict(df.iloc[:,1:])
df['label'] = clusters

sns.scatterplot(x='Annual Income (k$)',y='Spending Score (1-100)',hue = 'label',data=df,palette=['red','green','blue','black','pink','purple'])
plt.show()

fig = plt.figure(figsize = (20,10))
ax = fig.add_subplot(111,projection = '3d')

ax.scatter(df.Age[df.label==0],df["Annual Income (k$)"][df.label==0],df["Spending Score (1-100)"][df.label==0],c='blue',s=60)

plt.xlabel("age")
plt.ylabel("salary")
ax.set_zlabel("score")
plt.show()

df

df.iloc[:,1:]

df

pip install scipy

import numpy as np
from scipy.stats import norm

list =[2,1,0,2,1,3,0,2,4,0,3,2,3,4,2,2,2,4,3,0]

series = pd.Series(list)

series.value_counts(ascending=True)

freq = pd.Series(series.value_counts(ascending=True))

freq

df = pd.DataFrame(
    {
        'number':freq.index,
        'frequency':freq.values
    }
)

print(df)

print('average',':',np.average(list))

a,b = 3.45,3.56

R = norm.pdf(a,b,list)
print('probablity',":",R)
plt.plot(R)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

df = pd.read_csv('/content/Mall_Customers.csv')

df.drop(['CustomerID'],axis=1,inplace=True)

df

gender = df['Genre'].value_counts()

#function1
plt.title("gender vs numbers")
sns.barplot(x=gender.index,y=gender.values)

plt.show()

#function2
plt.title("age distribution")
sns.distplot(x=df["Age"],bins=20)

plt.show()
#function3

age1 = df.Age[(df.Age >= 15) & (df.Age <= 20)]
age2 = df.Age[(df.Age >= 21) & (df.Age <= 30)]
age3 = df.Age[(df.Age >= 31) & (df.Age <= 40)]
age4 = df.Age[(df.Age >= 41) & (df.Age <= 50)]
age5 = df.Age[df.Age >= 51]

age = ['15-20','20-30','30-40','40-50','above50']

y = [len(age1),len(age2),len(age3),len(age4),len(age5)]
sns.barplot(x=age,y=y)

plt.show()
#function4

sns.violinplot(y=df['Spending Score (1-100)'],color='orange')

for i in range(20):
  print(i)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statistics

# Set random seed
np.random.seed(42)

# Create dummy data
x = pd.Series(np.random.normal(loc=10, scale=2, size=10))

# Define list variable for moving ranges
MR = [np.nan]

# Get and append moving ranges
i = 1
for data in range(1, len(x)):
    MR.append(abs(x[i] - x[i-1]))
    i += 1

# Convert list to pandas Series objects    
MR = pd.Series(MR)

# Concatenate mR Series with and rename columns
data = pd.concat([x,MR], axis=1).rename(columns={0:"x", 1:"mR"})

# Plot x and mR charts
fig, axs = plt.subplots(2, figsize=(15,15), sharex=True)

# x chart
axs[0].plot(data['x'], linestyle='-', marker='o', color='black')
axs[0].axhline(statistics.mean(data['x']), color='blue')
axs[0].axhline(statistics.mean(data['x'])+3*statistics.mean(data['mR'][1:len(data['mR'])])/1.128, color = 'red', linestyle = 'dashed')
axs[0].axhline(statistics.mean(data['x'])-3*statistics.mean(data['mR'][1:len(data['mR'])])/1.128, color = 'red', linestyle = 'dashed')
axs[0].set_title('Individual Chart')
axs[0].set(xlabel='Unit', ylabel='Value')

# mR chart
axs[1].plot(data['mR'], linestyle='-', marker='o', color='black')
axs[1].axhline(statistics.mean(data['mR'][1:len(data['mR'])]), color='blue')
axs[1].axhline(statistics.mean(data['mR'][1:len(data['mR'])])+3*statistics.mean(data['mR'][1:len(data['mR'])])*0.8525, color='red', linestyle ='dashed')
axs[1].axhline(statistics.mean(data['mR'][1:len(data['mR'])])-3*statistics.mean(data['mR'][1:len(data['mR'])])*0.8525, color='red', linestyle ='dashed')
axs[1].set_ylim(bottom=0)
axs[1].set_title('mR Chart')
axs[1].set(xlabel='Unit', ylabel='Range')

# Validate points out of control limits for x chart
i = 0
control = True
for unit in data['x']:
    if unit > statistics.mean(data['x'])+3*statistics.mean(data['mR'][1:len(data['mR'])])/1.128 or unit < statistics.mean(data['x'])-3*statistics.mean(data['mR'][1:len(data['mR'])])/1.128:
        print('Unit', i, 'out of cotrol limits!')
        control = False
    i += 1
if control == True:
    print('All points within control limits.')
    
# Validate points out of control limits for mR chart
i = 0
control = True
for unit in data['mR']:
    if unit > statistics.mean(data['mR'][1:len(data['mR'])])+3*statistics.mean(data['mR'][1:len(data['mR'])])*0.8525 or unit < statistics.mean(data['mR'][1:len(data['mR'])])-3*statistics.mean(data['mR'][1:len(data['mR'])])*0.8525:
        print('Unit', i, 'out of control limits!')
        control = False
    i += 1
if control == True:
    print('All points within control limits.')