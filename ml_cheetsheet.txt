# -*- coding: utf-8 -*-
"""ml_cheetsheet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDHkC-4yiiPoiEUMGb3icIxXKBh-VcUZ

#creating an dataset and applying ml concepts
"""

import numpy as np
no_of_skills = np.linspace(1,50,500,dtype=int)
no_of_skills

buffer=np.random.randint(1,5000,500)

salaries = no_of_skills*8000+buffer
salaries

import pandas as pd

df=pd.DataFrame({
    'skills': no_of_skills,
    'salaries':salaries
})
df

x = df[['skills']].values
y = df[['salaries']].values

import matplotlib.pyplot as plt
plt.scatter(no_of_skills,salaries)
plt.rcParams['figure.figsize']=8,10
plt.xlabel('skills')
plt.ylabel('salaries')

from sklearn.model_selection import train_test_split
x_test,x_train,y_train,y_test = train_test_split(x,y,train_size=0.8)

x_test.shape,x_train.shape,y_train.shape,y_test.shape

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

lr.fit(x_train,y_train)

lr.predict([[50]])

usrinp=int(input("enter the skills:"))
print("the predicted salary is:",int(lr.predict([[usrinp]])))

y_pred=lr.predict(x_train)
plt.scatter(x,y)
plt.plot(x,y,color='green')



"""#using a other dataset

"""

import pandas as pd
df=pd.read_csv('/content/CarPrice_Assignment.csv')
df

df.info()

df.describe()

df.boxplot(column=['compressionratio'])

df=df[df['compressionratio']<20]

df.columns

df=df[[  'fueltype', 'aspiration',
       'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase',
       'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype',
       'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke',
       'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg',
       'price']]

df['aspiration'].value_counts

import matplotlib.pyplot as plt
plt.rcParams['figure.figsize']=14,12

df.corr()

import seaborn as sb
sb.heatmap(df.corr(),annot=True)

cat_cols=['fueltype','aspiration','doornumber','carbody','drivewheel','enginelocation','enginetype','cylindernumber','fuelsystem']

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

for col in cat_cols:
  le=LabelEncoder()
  df[col] = le.fit_transform(df[col])

df

x=df[['fueltype', 'aspiration',
       'doornumber', 'carbody', 'drivewheel', 'enginelocation', 'wheelbase',
       'carlength', 'carwidth', 'carheight', 'curbweight', 'enginetype',
       'cylindernumber', 'enginesize', 'fuelsystem', 'boreratio', 'stroke',
       'compressionratio', 'horsepower', 'peakrpm', 'citympg', 'highwaympg',
       'price']].values
y=df[['price']].values

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.8)

x_train.shape,x_text.shape,y_train.shape,y_test.shape

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)

y_pred=lr.predict(x_test)

from sklearn.metrics import mean_squared_error,mean_absolute_error

mean_absolute_error(y_test,y_pred)

"""#logistic regression

``
"""

import pandas as pd
df=pd.read_csv('/content/Churn_Modelling.csv')
df

df.info()

df.describe()

df.boxplot(column=['Age'])

df=df[df['Age']<62]

df.boxplot(column=['Balance'])

df.head()

df.columns

df = df[['CreditScore', 'Geography',
       'Gender', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard',
       'IsActiveMember', 'EstimatedSalary', 'Exited']]

df

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['Geography']=le.fit_transform(df['Geography'])
df['Gender']=le.fit_transform(df['Gender'])

df

df.columns

x=df[['CreditScore', 'Geography', 'Gender', 'Age', 'Tenure', 'Balance',
       'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary',]].values
y=df[['Exited']].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(x_train,y_train)

y_pred=lr.predict(x_test)
y_pred

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

df['Exited'].value_counts()

x=df[['CreditScore', 'Geography', 'Gender', 'Age', 'Tenure', 'Balance',
       'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary',]]
y=df[['Exited']]



from imblearn.under_sampling import RandomUnderSampler
rus=RandomUnderSampler()

x,y=rus.fit_resample(x,y)

x.shape,y.shape

x

y



from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(x_train,y_train)

y_pred=lr.predict(x_test)
y_pred

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

x.columns

lr.predict([[350,2,1,36,6,10000,3,1,1,25000,]])

"""#kNN

"""

import pandas as pd
df=pd.read_csv('/content/adult.csv')
df

df.info()

df.describe()

df.columns

df['gender'].value_counts()

df=df[['age', 'workclass', 'education', 'educational-num',
       'marital-status', 'occupation', 'relationship', 'race', 'gender', 'hours-per-week', 'native-country',
       'income']]

df[['education','educational-num']].head(20)

df=df[['age', 'workclass',  'educational-num',
       'marital-status', 'occupation', 'relationship', 'race', 'gender', 'hours-per-week', 'native-country',
       'income']]

df

cols=list(set(df.columns)-set(df.describe().columns))

from sklearn.preprocessing import LabelEncoder

for eachcol in cols:
  le=LabelEncoder()
  df[eachcol]=le.fit_transform(df[eachcol])

df

df.corr(
)

df.columns

df=df[['age', 'workclass', 'educational-num', 'marital-status', 'occupation',
       'relationship', 'race', 'gender', 'hours-per-week',
       'income']]

df

x=df[['age', 'workclass', 'educational-num', 'marital-status', 'occupation',
       'relationship', 'race', 'hours-per-week',
       'income']].values
y=df[['gender']].values

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(x,y,train_size=0.8)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(xtrain,ytrain.ravel())

ypred=knn.predict(xtest)

from sklearn.metrics import accuracy_score
accuracy_score(ytest,ypred)

ypred

from imblearn.under_sampling import RandomUnderSampler

rus=RandomUnderSampler()

x=df[['age', 'workclass', 'educational-num', 'marital-status', 'occupation',
       'relationship', 'race', 'hours-per-week',
       'income']]
y=df[['gender']]

x,y=rus.fit_resample(x,y)

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest = train_test_split(x,y,train_size=0.8)

xtrain.shape,xtest.shape,ytrain.shape,ytest.shape

knn.fit(xtrain,ytrain.ravel())

ypred=knn.predict(xtest)

from sklearn.metrics import accuracy_score
accuracy_score(ytest,ypred)

ypred



"""#decision tree(extensive data cleaning)

"""

import pandas as pd
df=pd.read_csv('/content/fake_job_postings.csv')

df

df.info()

df['fraudulent'].value_counts()

df.dropna()['fraudulent'].value_counts()

df.describe()

df.columns

df=df[[ 'title', 'location', 'department', 'salary_range',
       'telecommuting', 'has_company_logo', 'has_questions', 'employment_type',
       'required_experience', 'required_education', 'industry', 'function',
       'fraudulent']]

df.info()

df[['salary_range']].head(20)

df[-df['salary_range'].isna()][['salary_range']].head(50)

df_salary_range_empty=df[df['salary_range'].isna()]
df_salary_range_filled=df[-df['salary_range'].isna()]

error=[]
for i in range(df_salary_range_empty.shape[0]): 
   current= df_salary_range_filled['salary_range'].values[i]
   list_values= current.split('-')
   try:
     int(list_values[0])
     int(list_values[1])
   except:
     print(current)
     error.append(current)

error

for each_error in error:
  df_salary_range_filled = df_salary_range_filled[df_salary_range_filled['salary_range']!=each_error]

df['location'].values[2]

df[df['location'] =='US, DC, Washington']

df[df['location'] =='US, DC, Washington'][['required_experience']]

df[df['title'].str.contains('Manager')]

for i in range(df_salary_range_empty.shape[0]): 
   current= df_salary_range_filled['salary_range'].values[i]
   list_values= current.split('-')
   try:
     avg_val=(int(list_values[0])+int(list_values[1]))/2
     df_salary_range_filled['salary_range'].values[i] = avg_val
   except:
     print(current)

df_salary_range_filled[['salary_range']]

df_salary_range_filled['salary_range'].mean()



df_salary_range_empty['salary_range'] = df_salary_range_filled['salary_range'].mean()

df=df_salary_range_filled.append(df_salary_range_empty)

df_salary_range_empty['salary_range']

df.info()

dict(df['title'].value_counts())

IT = ['developer','software','data','engineer','network','analyst','technical','it']
manager = ['manager','management','product','sales','marketing','account','executive','supervisor']

for i in range(df.shape[0]):
    current_title = df['title'].values[i]
    list_of_title=current_title.split(' ')

    simplified_title=''
    for word in list_of_title:
        if word.lower() in IT:
            simplified_title='Information technology'
            break

        if word.lower() in manager:
            simplified_title='Management'
            break
    
        else:
            simplified_title = 'Others'

    df['title'].values[i] = simplified_title

df

df['title'].value_counts()

df.info()

dict(df['location'].value_counts())

df.location.str[:2]

df['location']=df.location.str[:2]

df

df[['department','industry','function']]

df.columns

df=df[['title', 'location', 'salary_range', 'telecommuting',
       'has_company_logo', 'has_questions', 'employment_type',
       'required_experience', 'required_education', 'industry', 'function',
       'fraudulent']]

df.info()

df['employment_type'].value_counts()

df['employment_type']=df['employment_type'].fillna('others')

df.info()

df['required_experience'].value_counts()

df['required_experience']=df['required_experience'].fillna('empty')

df.info()

df['required_education'].value_counts()

df['required_education'] = df['required_education'].fillna("unspecified")

df.info()

dict(df['industry'].value_counts())

df['industry'] = df['industry'].fillna("Entrepreneurs")

df['location'].value_counts()

df['location'] = df['location'].fillna('US ')

df.info()

df['function'].value_counts()

df['function'] = df['function'].fillna('Other')

df.info()

df['salary_range']=df['salary_range'].astype(int)

catcols=list(set(df.columns) - set(df.describe().columns))

catcols

from sklearn.preprocessing import LabelEncoder
for eachcol in catcols:
  le = LabelEncoder()
  df[eachcol] = le.fit_transform(df[eachcol].astype(str))

df

from sklearn.ensemble import RandomForestClassifier

from sklearn.svm import SVC

svm = SVC()
rfc = RandomForestClassifier()

df.columns

x = df[['title', 'location', 'salary_range', 'telecommuting',
       'has_company_logo', 'has_questions', 'employment_type',
       'required_experience', 'required_education', 'industry', 'function']].values

y = df[['fraudulent']].values

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest = train_test_split(x,y)

svm.fit(xtrain,ytrain)

rfc.fit(xtrain,ytrain)

ypred1 = rfc.predict(xtest)

ypred2 = svm.predict(xtest)

from sklearn.metrics import accuracy_score

accuracy_score(ytest,ypred1)

accuracy_score(ytest,ypred2)

from imblearn.under_sampling import  RandomUnderSampler

rus=RandomUnderSampler()

x = df[['title', 'location', 'salary_range', 'telecommuting',
       'has_company_logo', 'has_questions', 'employment_type',
       'required_experience', 'required_education', 'industry', 'function']]
y = df[['fraudulent']]

xbal,ybal = rus.fit_resample(x,y)

xtrain,xtest,ytrain,ytest = train_test_split(xbal,ybal)

svm.fit(xtrain,ytrain)

rfc.fit(xtrain,ytrain)

ypred1 = rfc.predict(xtest)

ypred2 = svm.predict(xtest)

from sklearn.metrics import accuracy_score

accuracy_score(ytest,ypred1)

accuracy_score(ytest,ypred2)

"""#Kmeans 

"""

from sklearn.datasets import make_blobs

x,no_use=make_blobs(n_samples=500)

x

import matplotlib.pyplot as plt

plt.scatter(x[:,0],x[:,1])

from sklearn.cluster import KMeans

km=KMeans(n_clusters=3)

km.fit(x)

km.cluster_centers_

plt.scatter(x[:,0],x[:,1])
plt.scatter(-8.80315518,  -8.61977739)
plt.scatter(1.22872347,  -2.05772144)
plt.scatter(-6.48205479, -10.00736185)

